<?php

/**
 * BaseUser
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property enum $role
 * @property enum $status
 * @property string $email
 * @property string $password
 * @property string $name
 * @property integer $state_id
 * @property integer $city_id
 * @property string $request_code
 * @property enum $login_type
 * @property string $picture
 * @property State $State
 * @property City $City
 * @property Doctrine_Collection $Teacher
 * @property Doctrine_Collection $Student
 * @property Doctrine_Collection $Feedback
 * @property Doctrine_Collection $Newsletter
 * @property Doctrine_Collection $Topic
 * 
 * @method integer             getId()           Returns the current record's "id" value
 * @method enum                getRole()         Returns the current record's "role" value
 * @method enum                getStatus()       Returns the current record's "status" value
 * @method string              getEmail()        Returns the current record's "email" value
 * @method string              getPassword()     Returns the current record's "password" value
 * @method string              getName()         Returns the current record's "name" value
 * @method integer             getStateId()      Returns the current record's "state_id" value
 * @method integer             getCityId()       Returns the current record's "city_id" value
 * @method string              getRequestCode()  Returns the current record's "request_code" value
 * @method enum                getLoginType()    Returns the current record's "login_type" value
 * @method string              getPicture()      Returns the current record's "picture" value
 * @method State               getState()        Returns the current record's "State" value
 * @method City                getCity()         Returns the current record's "City" value
 * @method Doctrine_Collection getTeacher()      Returns the current record's "Teacher" collection
 * @method Doctrine_Collection getStudent()      Returns the current record's "Student" collection
 * @method Doctrine_Collection getFeedback()     Returns the current record's "Feedback" collection
 * @method Doctrine_Collection getNewsletter()   Returns the current record's "Newsletter" collection
 * @method Doctrine_Collection getTopic()        Returns the current record's "Topic" collection
 * @method User                setId()           Sets the current record's "id" value
 * @method User                setRole()         Sets the current record's "role" value
 * @method User                setStatus()       Sets the current record's "status" value
 * @method User                setEmail()        Sets the current record's "email" value
 * @method User                setPassword()     Sets the current record's "password" value
 * @method User                setName()         Sets the current record's "name" value
 * @method User                setStateId()      Sets the current record's "state_id" value
 * @method User                setCityId()       Sets the current record's "city_id" value
 * @method User                setRequestCode()  Sets the current record's "request_code" value
 * @method User                setLoginType()    Sets the current record's "login_type" value
 * @method User                setPicture()      Sets the current record's "picture" value
 * @method User                setState()        Sets the current record's "State" value
 * @method User                setCity()         Sets the current record's "City" value
 * @method User                setTeacher()      Sets the current record's "Teacher" collection
 * @method User                setStudent()      Sets the current record's "Student" collection
 * @method User                setFeedback()     Sets the current record's "Feedback" collection
 * @method User                setNewsletter()   Sets the current record's "Newsletter" collection
 * @method User                setTopic()        Sets the current record's "Topic" collection
 * 
 * @package    DOUBLECLICK
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseUser extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('user');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'unsigned' => true,
             'primary' => true,
             'autoincrement' => true,
             'length' => 4,
             ));
        $this->hasColumn('role', 'enum', null, array(
             'type' => 'enum',
             'values' => 
             array(
              0 => 0,
              1 => 1,
              2 => 2,
             ),
             'default' => 0,
             ));
        $this->hasColumn('status', 'enum', null, array(
             'type' => 'enum',
             'values' => 
             array(
              0 => 0,
              1 => 1,
              2 => 2,
              3 => 3,
              4 => 4,
             ),
             'default' => 0,
             ));
        $this->hasColumn('email', 'string', 80, array(
             'type' => 'string',
             'notnull' => true,
             'unique' => true,
             'length' => 80,
             ));
        $this->hasColumn('password', 'string', 32, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 32,
             ));
        $this->hasColumn('name', 'string', 100, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 100,
             ));
        $this->hasColumn('state_id', 'integer', 2, array(
             'type' => 'integer',
             'unsigned' => true,
             'notnull' => false,
             'length' => 2,
             ));
        $this->hasColumn('city_id', 'integer', 2, array(
             'type' => 'integer',
             'unsigned' => true,
             'notnull' => false,
             'length' => 2,
             ));
        $this->hasColumn('request_code', 'string', 32, array(
             'type' => 'string',
             'length' => 32,
             ));
        $this->hasColumn('login_type', 'enum', null, array(
             'type' => 'enum',
             'values' => 
             array(
              0 => 0,
              1 => 1,
              2 => 2,
             ),
             'default' => 0,
             ));
        $this->hasColumn('picture', 'string', 42, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 42,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('State', array(
             'local' => 'state_id',
             'foreign' => 'id',
             'onDelete' => 'SET NULL'));

        $this->hasOne('City', array(
             'local' => 'city_id',
             'foreign' => 'id',
             'onDelete' => 'SET NULL'));

        $this->hasMany('Teacher', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('Student', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('Feedback', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('Newsletter', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('Topic', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($timestampable0);
    }
}