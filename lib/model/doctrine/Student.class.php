<?php

/**
 * Student
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    DOUBLECLICK
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class Student extends BaseStudent
{
  /**
   * Returns the string representation for the status property.
   *
   * @return string
   */
  public function _getStatus()
  {
    switch ($this->getStatus())
    {
      case 0: return 'Pending';
      case 1: return 'Active';
      case 2: return 'Deactivated';
      case 3: return 'Deleted';
      case 4: return 'Expired Subscription';
    }
  }
  
  /**
   * Gets the Student's Subscriptions.
   *
   * @param mixed $options   Optional. Defaults to empty array. Possible values: 'is_active'.
   */
  public function getSubscriptions($options = array(), $limit = 0, $offset = 0)
  {
    return SubscriptionTable::getInstance()->getByOptionsQuery($options + array('student_id' => $this->getId()))->execute();
  }
  
  /**
   * Returns the string representation for the active Subscriptions.
   *
   * @return string SubscriptionPlan names
   */
  public function _getActiveSubscriptions()
  {
    $activeSubscriptions = $this->getSubscriptions(array('is_active' => 1));
    
    $activeSubscriptionsArr = array();
    foreach ($activeSubscriptions as $activeSubscription)
    {
      $activeSubscriptionsArr[$activeSubscription->getId()] = $activeSubscription->getSubscriptionPlan()->getName();
    }
    
    return implode(', ', $activeSubscriptionsArr);
  }
  
  /**
   * Gets the Student's Subscription that will expire last.
   *
   * @return Subscription Subscription that has latest valid_until property
   */
  public function getLastSubscriptionToExpire()
  {
    $query = SubscriptionTable::getInstance()->getByOptionsQuery(array('student_id' => $this->getId(), 'is_active' => 1));
    $alias = $query->getRootAlias();
    
    return $query->orderBy("$alias.valid_until DESC, $alias.created_at ASC")
      ->fetchOne();
  }
  
  public function getAvailableTeachersToSubscribeTo()
  {
    return TeacherTable::getInstance()->createQuery('t')
      ->where('NOT EXISTS (SELECT sbp.teacher_id FROM SubscriptionPlan sbp, Subscription sub WHERE sbp.teacher_id = t.id AND sub.subscription_plan_id = sbp.id AND sub.student_id = ?)', $this->getId())
      ->execute();
  }
}
